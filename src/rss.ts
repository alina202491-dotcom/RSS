import type { ExtractedItem, FeedSiteInfo } from "./types";

function xmlEscape(value: string): string {
	return value
		.replace(/&/g, "&amp;")
		.replace(/</g, "&lt;")
		.replace(/>/g, "&gt;")
		.replace(/\"/g, "&quot;")
		.replace(/'/g, "&apos;");
}

function cdata(value: string): string {
	// Wrap in CDATA; if the value itself contains "]]>", split it safely
	return `<![CDATA[${value.replace("]]>", "]]>]]><![CDATA[") }]]>`;
}

function rfc822(date: Date): string {
	return date.toUTCString();
}

export interface ChannelInfo extends FeedSiteInfo {
	lastBuildDate?: Date;
}

export function buildRss(channel: ChannelInfo, items: ExtractedItem[]): string {
	const channelTitle = xmlEscape(channel.title || "Feed");
	const channelLink = xmlEscape(channel.link || "");
	const channelDescription = xmlEscape(channel.description || "Generated by Cloudflare-FreeRSS");
	const lastBuildDate = rfc822(channel.lastBuildDate || new Date());

	const itemsXml = items
		.map((it) => {
			const titleXml = it.title ? `<title>${xmlEscape(it.title)}</title>` : "";
			const linkXml = it.link ? `<link>${xmlEscape(it.link)}</link>` : "";
			const guidXml = it.link ? `<guid isPermaLink="true">${xmlEscape(it.link)}</guid>` : "";
			const descXml = it.content ? `<description>${cdata(it.content)}</description>` : "";
			const pubDateXml = it.date ? `<pubDate>${xmlEscape(it.date)}</pubDate>` : "";
			return `<item>${titleXml}${linkXml}${guidXml}${descXml}${pubDateXml}</item>`;
		})
		.join("");

	return `<?xml version="1.0" encoding="UTF-8"?>\n<rss version="2.0">\n<channel>\n<title>${channelTitle}</title>\n<link>${channelLink}</link>\n<description>${channelDescription}</description>\n<lastBuildDate>${lastBuildDate}</lastBuildDate>\n${itemsXml}\n</channel>\n</rss>`;
}